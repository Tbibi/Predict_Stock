from datetime import date
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import load_model
import streamlit as st
import yfinance as yf
import matplotlib.pyplot as plt
import os

# Function to load and preprocess data
def load_data(symbol, start_date, end_date):
    data = yf.download(symbol, start=start_date, end=end_date)
    data.to_csv(f'{symbol}_stock_data.csv')
    return data

# Function to make predictions on the test set
def make_predictions(model, X_test, scaler, days):
    predicted_stock_prices = []
    input_sequence = X_test[-1]

    for i in range(days):
        input_sequence = np.reshape(input_sequence, (1, input_sequence.shape[0], 1))
        predicted_price = model.predict(input_sequence)
        predicted_stock_prices.append(predicted_price[0, 0])
        input_sequence = np.append(input_sequence[:, 1:, :], predicted_price[0, 0])

    predicted_stock_prices = np.array(predicted_stock_prices)
    predicted_stock_prices = scaler.inverse_transform(predicted_stock_prices.reshape(-1, 1))

    return predicted_stock_prices

# Streamlit App
st.title('Stock Price Prediction App')

# Sidebar for user inputs
st.sidebar.header('User Inputs')

symbol = st.sidebar.text_input('Enter Stock Symbol (e.g., TSLA):', 'TSLA')
start_date = st.sidebar.date_input('Select Start Date:', pd.to_datetime('2021-01-01'))
end_date = st.sidebar.date_input('Select End Date (default: today):', date.today())

# Load and preprocess data
data = load_data(symbol, start_date, end_date)

# Display dataset information
st.write('**Dataset Information:**')
st.write(data.head())

# Data normalization
sc = MinMaxScaler(feature_range=(0, 1))
training_set_scaled = sc.fit_transform(data['Close'].values.reshape(-1, 1))

# Prepare training data
X_train, y_train = [], []

for i in range(60, len(training_set_scaled)):
    X_train.append(training_set_scaled[i - 60:i, 0])
    y_train.append(training_set_scaled[i, 0])

X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

# Load the trained model
model_filename = f'{symbol}Model.keras'
model_path = os.path.abspath(model_filename)

if os.path.exists(model_path):
    model = load_model(model_path)
    st.success(f'Model loaded from {model_path}')
else:
    st.error(f'Model file not found at {model_path}. Please ensure the file exists.')
    st.stop()

# Display a message indicating that the model is loaded
st.success(f'Model loaded from {model_path}')

# Data test transformation
dataset_total = pd.concat((data['Close'], data['Close']), axis=0)
inputs = dataset_total[len(dataset_total) - len(data) - 60:].values
inputs = inputs.reshape(-1, 1)
inputs = sc.transform(inputs)

X_test = []

for i in range(60, 60 + len(data)):
    X_test.append(inputs[i - 60:i, 0])

X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

# Make predictions for the next 7 days
predicted_stock_prices = make_predictions(model, X_test, sc, days=7)

# Plot actual and predicted stock prices
st.write('**Stock Price Prediction Chart:**')
chart_data = pd.DataFrame({
    'Date': data.index,
    'Actual Stock Price': data['Close'].values,
    'Predicted Stock Price': np.concatenate([data['Close'].values[-1:], predicted_stock_prices.flatten()])
})

fig, ax = plt.subplots(figsize=(12, 6))
ax.plot(chart_data['Date'], chart_data['Actual Stock Price'], label='Actual Stock Price', color='blue')
ax.plot(chart_data['Date'][-1:] + pd.DateOffset(1), chart_data['Predicted Stock Price'], label='Predicted Stock Prices (Next 7 Days)', color='red', marker='o')
ax.set_title(f'{symbol} Stock Price Prediction for the Next 7 Days')
ax.set_xlabel('Date')
ax.set_ylabel('Stock Price (Close)')
ax.legend()

# Display the plot using Streamlit
st.pyplot(fig)
add a chart for my code app streamlit
